# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Attribute {
  id: ID!
  name: String!
  required: Boolean!
  type: AttributeType!
}

type AttributeMutationResponse implements MutationResponse {
  attribute: Attribute
  code: String!
  message: String!
  project: Project
  success: Boolean!
}

enum AttributeType {
  boolean
  date
  datetime
  float
  int
  string
}

type Collection {
  attributes: [Attribute!]!
  createdDate: DateTime!
  id: ID!
  name: String!
  permissions: [String!]!
  relationships: [Relationship!]!
  updatedDate: DateTime!
}

type CollectionMutationResponse implements MutationResponse {
  code: String!
  collection: Collection
  message: String!
  project: Project
  success: Boolean!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DeleteMutationResponse implements MutationResponse {
  code: String!
  message: String!
  success: Boolean!
}

type Event {
  createdDate: DateTime!
  id: ID!
  type: EventType!
}

enum EventType {
  accountCreate
  accountDelete
  accountRecoveryCreate
  accountRecoveryUpdate
  accountSessionsCreate
  accountSessionsDelete
  accountUpdateEmail
  accountUpdateName
  accountUpdatePassword
  accountVerificationCreate
  accountVerificationUpdate
  databaseCollectionsCreate
  databaseCollectionsDelete
  databaseCollectionsUpdate
  databaseDocumentsCreate
  databaseDocumentsDelete
  databaseDocumentsUpdate
  teamsCreate
  teamsDelete
  teamsMembershipsCreate
  teamsMembershipsDelete
  teamsMembershipsStatus
  teamsUpdate
  usersCreate
  usersDelete
  usersSessionsDelete
  usersUpdateStatus
}

type Key {
  createdDate: DateTime!
  id: ID!
  name: String!
  scope: [Scope!]!
  updatedDate: DateTime!
}

type KeyMutationResponse implements MutationResponse {
  code: String!
  key: Key
  message: String!
  success: Boolean!
}

type Mutation {
  createAttribute(collectionId: ID!, name: String!, type: AttributeType!): AttributeMutationResponse!
  createCollection(name: String!, permissions: [String!], projectId: ID!): CollectionMutationResponse!
  createKey(name: String!, projectId: ID!, scope: [Scope!]!): KeyMutationResponse!
  createManyToOneRelationship(collectionId: ID!, inverse: String, name: String!, relatedCollectionId: ID!): RelationshipMutationResponse!
  createOneToOneRelationship(collectionId: ID!, inverse: String, name: String!, relatedCollectionId: ID!): RelationshipMutationResponse!
  createProject(name: String!): ProjectMutationResponse!
  createTeam(name: String!, projectId: ID!): TeamMutationResponse!
  createUser(email: String!, name: String, password: String!, projectId: ID!): UserMutationResponse!
  deleteAttribute(id: ID!): DeleteMutationResponse!
  deleteCollection(id: ID!): DeleteMutationResponse!
  deleteKey(id: ID!): DeleteMutationResponse!
  deleteProject(id: ID!): DeleteMutationResponse!
  deleteRelationship(id: ID!): DeleteMutationResponse!
  deleteSession(id: ID!): DeleteMutationResponse!
  deleteTeam(id: ID!): DeleteMutationResponse!
  deleteUser(id: ID!): DeleteMutationResponse!
  renameAttribute(id: ID!, name: String!): AttributeMutationResponse!
  renameRelationship(id: ID!, name: String!): RelationshipMutationResponse!
  renameRelationshipInverse(id: ID!, inverse: String!): RelationshipMutationResponse!
  signIn(email: String!, password: String!): SignInMutationResponse!
  signUp(email: String!, password: String!): SignUpMutationResponse!
  updateCollection(collectionId: ID!, name: String, permissions: [String!]): CollectionMutationResponse!
  updateKey(id: ID!, name: String, scope: [Scope!]): KeyMutationResponse!
}

interface MutationResponse {
  code: String!
  message: String!
  success: Boolean!
}

type Profile {
  email: String!
  name: String
}

type Project {
  collections: [Collection!]!
  createdDate: DateTime!
  events: [Event!]!
  id: ID!
  keys: [Key!]!
  name: String!
  teams: [Team!]!
  updatedDate: DateTime!
  users: [User!]!
}

type ProjectMutationResponse implements MutationResponse {
  code: String!
  message: String!
  project: Project
  success: Boolean!
}

type Query {
  getKeyToken(id: ID!): String!
  getProfile: Profile!
  getProject(id: ID!): Project!
  listProjects: [Project!]!
}

type Relationship {
  id: ID!
  inverse: String
  name: String!
  owner: Boolean!
  relatedCollection: Collection!
  type: RelationshipType!
}

type RelationshipMutationResponse implements MutationResponse {
  code: String!
  message: String!
  project: Project
  relationship: Relationship
  success: Boolean!
}

enum RelationshipType {
  hasMany
  hasOne
}

enum Scope {
  collectionsRead
  collectionsWrite
  documentsRead
  documentsWrite
  filesRead
  filesWrite
  healthRead
  teamsRead
  teamsWrite
  usersRead
  usersWrite
}

type Session {
  createdDate: DateTime!
  id: ID!
  userAgent: String!
}

type SignInMutationResponse implements MutationResponse {
  code: String!
  message: String!
  success: Boolean!
  token: String
}

type SignUpMutationResponse implements MutationResponse {
  code: String!
  message: String!
  success: Boolean!
  token: String
}

type Team {
  createdDate: DateTime!
  id: ID!
  name: String!
  updatedDate: DateTime!
}

type TeamMutationResponse implements MutationResponse {
  code: String!
  message: String!
  success: Boolean!
  team: Team
}

type User {
  createdDate: DateTime!
  disabledDate: DateTime
  email: String!
  id: ID!
  name: String
  sessions: [Session!]!
  updatedDate: DateTime!
  verifiedDate: DateTime
}

type UserMutationResponse implements MutationResponse {
  code: String!
  message: String!
  success: Boolean!
  user: User
}
