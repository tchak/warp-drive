# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type APIKey {
  createdDate: DateTime!
  id: ID!
  name: String!
  scope: [Scope!]!
  updatedDate: DateTime!
}

type Attribute {
  id: ID!
  name: String!
  required: Boolean!
  type: AttributeType!
}

enum AttributeType {
  boolean
  date
  datetime
  float
  int
  string
}

type BooleanAttribute {
  name: String!
  value: Boolean!
}

type Collection {
  attributes: [Attribute!]!
  createdDate: DateTime!
  documents: [Document!]!
  id: ID!
  name: String!
  relationships: [Relationship!]!
  updatedDate: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DeletedAttribute {
  id: ID!
}

type DeletedCollection {
  id: ID!
}

type DeletedDocument {
  id: ID!
}

type DeletedProject {
  id: ID!
}

type DeletedRelationship {
  id: ID!
}

type DeletedSession {
  id: ID!
}

type DeletedTeam {
  id: ID!
}

type DeletedUser {
  id: ID!
}

type Document {
  attributes: [TypedAttribute!]!
  collection: Collection!
  id: ID!
}

enum EventType {
  accountCreate
  accountDelete
  accountRecoveryCreate
  accountRecoveryUpdate
  accountSessionsCreate
  accountSessionsDelete
  accountUpdateEmail
  accountUpdateName
  accountUpdatePassword
  accountVerificationCreate
  accountVerificationUpdate
  databaseCollectionsCreate
  databaseCollectionsDelete
  databaseCollectionsUpdate
  databaseDocumentsCreate
  databaseDocumentsDelete
  databaseDocumentsUpdate
  teamsCreate
  teamsDelete
  teamsMembershipsCreate
  teamsMembershipsDelete
  teamsMembershipsStatus
  teamsUpdate
  usersCreate
  usersDelete
  usersSessionsDelete
  usersUpdateStatus
}

type FloatAttribute {
  name: String!
  value: Float!
}

type IntAttribute {
  name: String!
  value: Int!
}

type Log {
  createdDate: DateTime!
  id: ID!
  type: EventType!
}

type Mutation {
  createAttribute(collectionId: ID!, name: String!, type: AttributeType!): Attribute!
  createCollection(name: String!): Collection!
  createDocument(collectionId: ID!): Document!
  createManyToOneRelationship(collectionId: ID!, inverse: String, name: String!, relatedCollectionId: ID!): Relationship!
  createOneToOneRelationship(collectionId: ID!, inverse: String, name: String!, relatedCollectionId: ID!): Relationship!
  createProject(name: String!): Project!
  createTeam(name: String!): Team!
  createUser(email: String!, name: String, password: String!): User!
  deleteAttribute(id: ID!): DeletedAttribute!
  deleteCollection(id: ID!): DeletedCollection!
  deleteDocument(id: ID!): DeletedDocument!
  deleteProject(id: ID!): DeletedProject!
  deleteRelationship(id: ID!): DeletedRelationship!
  deleteSession(id: ID!): DeletedSession!
  deleteTeam(id: ID!): DeletedTeam!
  deleteUser(id: ID!): DeletedUser!
  renameAttribute(id: ID!, name: String!): Attribute!
  renameRelationship(id: ID!, name: String!): Relationship!
  renameRelationshipInverse(id: ID!, inverse: String!): Relationship!
  signIn(email: String!, password: String!): SignInPayload!
  signUp(email: String!, password: String!): SignUpPayload!
  updateBooleanAttribute(documentId: ID!, name: String!, value: Boolean!): BooleanAttribute!
  updateFloatAttribute(documentId: ID!, name: String!, value: Float!): FloatAttribute!
  updateIntAttribute(documentId: ID!, name: String!, value: Int!): IntAttribute!
  updateStringAttribute(documentId: ID!, name: String!, value: String!): StringAttribute!
}

type NullAttribute {
  name: String!
}

type Profile {
  email: String!
  name: String
}

type Project {
  collections: [Collection!]!
  createdDate: DateTime!
  id: ID!
  keys: [APIKey!]!
  logs: [Log!]!
  name: String!
  teams: [Team!]!
  updatedDate: DateTime!
  users: [User!]!
}

type Query {
  me: Profile!
  project(id: ID!): Project!
  projects: [Project!]!
}

type Relationship {
  id: ID!
  inverse: String
  name: String!
  relatedCollection: Collection!
  type: RelationshipType!
}

enum RelationshipType {
  hasMany
  hasOne
}

enum Scope {
  collectionsRead
  collectionsWrite
  documentsRead
  documentsWrite
  filesRead
  filesWrite
  healthRead
  teamsRead
  teamsWrite
  usersRead
  usersWrite
}

type Session {
  createdDate: DateTime!
  id: ID!
  userAgent: String!
}

type SignInPayload {
  token: String!
}

type SignUpPayload {
  token: String!
}

type StringAttribute {
  name: String!
  value: String!
}

type Team {
  createdDate: DateTime!
  id: ID!
  name: String!
  updatedDate: DateTime!
}

union TypedAttribute = BooleanAttribute | FloatAttribute | IntAttribute | NullAttribute | StringAttribute

type User {
  createdDate: DateTime!
  email: String!
  id: ID!
  name: String
  sessions: [Session!]!
  updatedDate: DateTime!
}
